module Ejercicios where
import Data.Char

{--d) Implementa una función que sume los cuadrados de los números pares contenidos en
una lista de números enteros. Se piden dos versiones:
a. Una versión que haga uso de las funciones de orden superior de listas map y
filter para definir la nueva función.
b. Una versión que utilice la definición de listas por comprensión--}

--A
sumaCuadrado :: [Int]->[Int]
sumaCuadrado lista=  eliminar lista ++ (map(^2) (filter even (lista)))
--sumaCuadrado lista=filter even (map (^2) lista)

eliminar::[Int]->[Int]
eliminar lista=foldl(\ acum x ->if even x then acum else acum ++[x])[]lista

--B
sumaCuadrados :: [Int]->[Int]
sumaCuadrados lista = [x^2 | x<-lista , even x ]

{--Se pide una función polimórfica en Haskell que dado un elemento y una lista añada
dicho elemento al final de la lista.--}

alFinal::[a]->b->[a]
alFinal []elemento=[elemento]
alFinal lista elemento = lista ++ [elemento]